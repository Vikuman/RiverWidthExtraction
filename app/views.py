from django.shortcuts import render
import re
import base64

# Create your views here.
"""
Definition of views.
"""
import os.path
try:
    from StringIO import StringIO
except ImportError:
    from io import StringIO
from PIL import Image
import cv2
import base64
from django.shortcuts import render
from django.utils.baseconv import base64
from django.http import HttpRequest
from django.template import RequestContext
from datetime import datetime
from django.views.generic import TemplateView
import base64
import copy
from app.forms import HomeForm
from app.forms import image_form
from django.http import HttpResponse
from wsgiref.util import FileWrapper
from django.conf import settings
from mimetypes import MimeTypes
from functions.PythonApplication1 import main

final_data = "adda"
download_path = ""


def image_upload(self, request):
    if request.method == 'POST' and request.FILES['riverimage']:
        myfile = request.FILES['myfile']
        context = {'imageFile': myfile}
        return render(request, 'app/home.html')


def home(request):
    x_cord_1 = 0
    y_cord_1 = 0
    x_cord_2 = 0
    y_cord_2 = 0
    averagewidth = ""
    details = ""
    """Renders the home page."""
    assert isinstance(request, HttpRequest)
    template_name = 'app/home.html'
    # if request.method == 'POST' and request.FILES['riverimage']:
    #        myfile = request.FILES['riverimage']
    text = ""
    token = 0
    beta = ""
    # form1= image_form()
    global final_data
    global download_path

    b64_img = ""
    k = b64_img
    # and request.FILES.get('riverimage', False)
    if request.method == 'POST':
        if request.FILES.get('riverimage', False):
            token = 1
            formexample = HomeForm()
            imag = request.FILES['riverimage']
            imageCopy = copy.deepcopy(imag)
            b64_img = base64.b64encode(imageCopy.read()).decode()
            formexample.image_resend = b64_img
            b64_img1 = b64_img
            num_visits = request.session.get('num_visits', 0)
            request.session['num_visits'] = num_visits+1

            # form=HomeForm(request.POST,request.FILES)

        if 'final-submit' in request.POST:
            formexample = HomeForm(request.POST)
            if formexample.is_valid():
                b64_img = formexample.cleaned_data['image_resend']
                image_data = formexample.cleaned_data['image_to_process']
                # data=image_data.split(",")
                dataUrlPattern = re.compile(
                    'data:image/(png|jpeg);base64,(.*)$')
                image_data = dataUrlPattern.match(image_data).group(2)
                image_data = image_data.encode()
                name_id = formexample.cleaned_data['id_name']
                thresh = formexample.cleaned_data['thresh']
                scale = formexample.cleaned_data['scale']
                len_dang_arcs = formexample.cleaned_data['length_dangling_arc']
                interval_distance = formexample.cleaned_data['section_size']

                h = b'b64_img'+"=".encode('ascii') + \
                    "=".encode('ascii')+"=".encode('ascii')
                averagewidth, details = main(
                    image_data, name_id, thresh, scale, len_dang_arcs, interval_distance)
                print(formexample.cleaned_data['id_name'])
                beta = formexample.cleaned_data['id_name']
                # save_path='/home/vikuman/Desktop/iiserupdated/DjangoWebProject1/media'
                save_path = '/media/vikuman/Vikuman/pen_drive/iiserupdated/DjangoWebProject1/media'
                complete_name = os.path.join(save_path, name_id+".txt")
                download_path = os.path.join("/text_result", name_id+".txt")
                print("download path=", download_path)
                f = open(complete_name, "w+")
                f.write(details)
                f.close()

                # final_data = str(formexample.cleaned_data['thresh'])
                # return HttpResponse(request.session['final_data'])
                token = 2

    formexample = HomeForm(initial={'image_resend': b64_img})
    return render(
        request,
        template_name,
        {
            'form2': formexample,
            'image': b64_img,
            #      'text':text,
            'title': 'MOES River Width Extraction',
            'year': datetime.now().year,
            'token': token,
            'dabba': text,
            'download_path': download_path,
            'beta': beta,
        })


def index(request):
    """Renders the index page."""
    assert isinstance(request, HttpRequest)
    return render(
        request,
        'app/index.html',
        {
            'title': 'Index Page',
            'year': datetime.now().year,
        }
    )


def contact(request):
    """Renders the contact page."""
    assert isinstance(request, HttpRequest)
    return render(
        request,
        'app/contact.html',
        {
            'title': 'Contact',
            'message': 'Your contact page.',
            'year': datetime.now().year,
        }
    )


def about(request):
    """Renders the about page."""
    assert isinstance(request, HttpRequest)
    return render(
        request,
        'app/about.html',
        {
            'title': 'About',
            'message': 'Your application description page.',
            'year': datetime.now().year,
        }
    )


def download(request, file_name):
    # global download_path
    print("hello")
    file_path = settings.MEDIA_ROOT + '/' + file_name
    print(file_path)
    print("------------------------gfd--------------------------")
    print(file_name)
    # file_path = os.path.join(settings.TEXT_RESULT_ROOT ,download_path)
    # try:
    #     print("working")
    #     wrapper = FileWrapper(open(file_path,'r'))
    #     response = HttpResponse(wrapper,content_type='text/csv')
    #     response['Content-Disposition'] = 'inline;filename=' + os.path.basename(file_path)
    #     return response
    # except Exception as e:
    #     return None
    file_wrapper = FileWrapper(open(file_path, 'rb'))
    # file_mimetype = mimetypes.guess_type(file_path)
    response = HttpResponse(file_wrapper, content_type="text/plain")
    response['X-Sendfile'] = file_path
    response['Content-Length'] = os.stat(file_path).st_size
    # response['Content-Disposition'] = 'attachment; filename=%s' % smart_str(file_name)
    response['Content-Disposition'] = 'attachment; filename={0}'.format(
        file_name)

    return response
    # output=StringIO()
    # global final_data
    # filename="data.txt"
    # final_data=request.session.get['final_data']
    # content = str(final_data)
    # print (final_data)
    # response = HttpResponse(content, content_type='text/plain')
    # response['Content-Disposition'] = 'attachment;filename={0}'.format(filename)
    # final_data="adda"
    # return response

    # output.write(content)
    # content_1 = output.getvalue()
    # filename = "detect.txt"
    # response = HttpResponse(content_1, content_type='text/plain')
    # response['Content-Disposition'] = 'attachment;filename={0}'.format(filename)
    # return response
    # output.close()
